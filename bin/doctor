#!/usr/bin/env bash

RED="\033[0;31m"
GREEN="\033[0;32m"
BLUE="\033[0;34m"
PURPLE="\033[0;35m"
NC="\033[0m"
FOUNDERROR="false"
CURL_CONTINUE="true"

headline() {
  echo ""
  echo "===> $1"
  echo ""
}

error() {
  echo -e "[${RED}ERROR${NC}] $1"
  FOUNDERROR="true"
}

info() {
  echo -e " [${BLUE}INFO${NC}] $1"
}

ok() {
  echo -e "   [${GREEN}OK${NC}] $1"
}

space() {
  echo -e "        $1"
}

headline "Software Requirements"

# Curl
command -v curl > /dev/null
if [ $? -eq 0 ]; then
  ok "curl is installed"

  # Check curl version
  CURL_VERSION=`curl --version | head -1 | awk '{print $2}'`
  if version_gt ${CURL_VERSION} 7.55.0; then
    ok "curl v7.55.0 or greater (found v${CURL_VERSION})"
  else
    error "curl v7.55.0 or greater is required, but found v${CURL_VERSION}"
    space "Read more in FIXME: Link to docs"
  fi
else
  error "curl command not found!"
  space "Read more on FIXME: Link to docs"
fi

# Git
command -v git > /dev/null
if [ $? -eq 0 ]; then
  ok "git is installed"
else
  error "git command not found!"
  space "Please install Git: FIXME: Link to docs"
fi

# JQ
command -v jq > /dev/null
if [ $? -eq 0 ]; then
  ok "jq is installed"
else
  error "jq command not found!"
  space "Please install jq: FIXME: Link to docs"
fi

# Ansible Playbook
command -v ansible > /dev/null
if [ $? -eq 0 ]; then
  ok "ansible is installed"
else
  info "ansible command not found!"
  space "Ansible is not a requirement for Longboat CLI tools as such, but if"
  space "you are planning on using Ansible with Longboat, it should be installed."
  space "FIXME: Link to docs"
fi

headline "Longboat User"

# User configuration
if [ -f "${USERCONFIG}" ]; then
  ok "Config file found"

  # API Token
  if [ -z "${LONGBOAT_TOKEN}" ]; then
    error "LONGBOAT_TOKEN not found!"
    space "You might need to run 'boat auth' - FIXME: Link to docs"
  else
    ok "Longboat token found"
  fi

  # Test API User Request
  CURL_SILENT=true
  api_curl GET /doctor/user
  if [ "${CURL_CODE}" == "200" ]; then
    ok "API says: ${PURPLE}${CURL_RESPONSE}${NC}"
  else
    error "Longboat API did not respond correctly - error was:"
    space "${CURL_RESPONSE}"
    space "Read more: FIXME: Link to docs"
  fi
else
  error "Longboat user config not found in: ${PURPLE}${USERCONFIG}${NC}"
  space "You won't be able to authenticate with Longboat and use the CLI tools."
  space "You can create a new user with: ${PURPLE}boat register${NC}"
  space "or authenticate an existing with: ${PURPLE}boat auth${NC}"
  space "More information: FIXME: Link to docs"
fi

headline "Longboat Project"

# Project configuration
if [ -f ./longboat.cfg ]; then
  ok "Project config file found"

  # API Project
  if [ -z "${LONGBOAT_PROJECT}" ]; then
    error "LONGBOAT_PROJECT not found!"
    space "You might need to run 'boat ???' - FIXME: Link to docs"
  else
    ok "Project ID: ${PURPLE}${LONGBOAT_PROJECT}${NC}"
  fi

  # Test API Project Request
  CURL_SILENT=true
  api_curl GET /doctor/project/${LONGBOAT_PROJECT}
  if [ "${CURL_CODE}" == "200" ]; then
    ok "API says project name is: ${PURPLE}${CURL_RESPONSE}${NC}"
  else
    error "Longboat API did not respond correctly - error was:"
    space "${CURL_RESPONSE}"
    space "Read more: FIXME: Link to docs"
  fi

  # Longboat roles
  if [ -d roles ]; then
    ok "Longboat roles found."
  else
    error "Longboat roles not found!"
    space "You might need to run 'boat pull' - FIXME: Link to docs"
  fi

else
  info "Project config not found in ./longboat.cfg"
  space "Skipping project tests."
  space "More information: FIXME: Link to documentation"
fi

headline "The Doctor's Conclusion"

if [ "${FOUNDERROR}" == "true" ]; then
  error "Unfortunately errors was found :("
  space "Please follow the documentation links for more information."
  exit 1
fi

ok "No errors \o/"
echo ""
exit 0

