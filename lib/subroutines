#!/usr/bin/env bash

RED="\033[0;31m"
GREEN="\033[0;32m"
BLUE="\033[0;34m"
PURPLE="\033[0;35m"
NC="\033[0m"

function echo_json() {
  echo "$1" | jq .
}

function api_curl() {
  local ARGS=""
  local METHOD="$1"
  local URL="${LONGBOAT_ENDPOINT}/${LONGBOAT_API}$2"
  local CURL_HEADER="${USERCONFIGDIR}/curl_header"

  # Create header file for CURL requests and keep it secret
  touch ${CURL_HEADER}
  chmod 600 ${CURL_HEADER}
  echo "Authorization: Bearer ${LONGBOAT_TOKEN}" > ${CURL_HEADER}

  # Create arguments for CURL request
  if [ $# -gt 2 ]; then
    for ARG in "${@:3}"; do
      ARGS="${ARGS} --data-urlencode ${ARG}"
    done
  fi

  CURL_TMP="/tmp/longboat.curl.$$"
  touch ${CURL_TMP}
  chmod 600 ${CURL_TMP}
  CURL_CODE=`curl -s -w "%{http_code}" -o "${CURL_TMP}" --header "@${CURL_HEADER}" ${ARGS} -X ${METHOD} "${URL}"`
  CURL_EXIT="$?"
  CURL_RESPONSE=`cat ${CURL_TMP}`
  rm ${CURL_TMP}

  if [ ${CURL_EXIT} -gt 0 ]; then
    echo "ERROR! API request failed - curl error code ${CURL_EXIT}"
    echo "For more information https://curl.haxx.se/libcurl/c/libcurl-errors.html"
    exit 1
  fi

  if [ -z ${CURL_SILENT} ]; then
    echo_json "${CURL_RESPONSE}"
  fi

  if [ -z ${CURL_CONTINUE} ]; then
    if [ "${CURL_CODE}" != "200" ]; then
      exit 1
    fi
  fi
}

function confirm_continue() {
  read CONFIRM
  if [ "${CONFIRM}" != "y" ]; then
    echo "aborted."
    exit 1
  fi
}

function confirm_delete() {
  local METHOD="$1"
  local URL="$2"

  if [ "${LONGBOAT_DONTASK}" == "true" ]; then
    api_curl ${METHOD} ${URL}
  else
    echo -n "Confirm delete with 'y' (y/N): "
    read CONFIRM
    if [ "${CONFIRM}" != "y" ]; then
      echo "Delete aborted."
      exit 1
    else
      api_curl ${METHOD} ${URL}
    fi
  fi
}

function version_gt() {
  test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1";
}

function user_dir_perms() {
  chmod 700 ${USERCONFIGDIR}
  chmod 600 ${USERCONFIG}
}

function user_hosts_update() {
  CURL_SILENT=true

  user_dir_perms

  # Update hosts file
  api_curl GET /user/config/hosts
  echo "${CURL_RESPONSE}" > ${USERCONFIGDIR}/hosts
  chmod 600 ${USERCONFIGDIR}/hosts

  # Update known_hosts file
  api_curl GET /user/config/known
  echo "${CURL_RESPONSE}" > ${USERCONFIGDIR}/known_hosts
  chmod 600 ${USERCONFIGDIR}/known_hosts
}
